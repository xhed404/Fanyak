import os
import random
import psycopg2
from psycopg2 import pool
from datetime import datetime
from collections import Counter
from telegram import Update, ParseMode
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler

CARD_FOLDER = "cards"
WAIT_HOURS = 2
CUBE_WAIT_SECONDS = 15 * 60

RARITY_EMOJIS = {
    "–æ–±—ã—á–Ω–∞—è": "‚≠êÔ∏è",
    "—Ä–µ–¥–∫–∞—è": "üíé",
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": "üî•",
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": "üëë",
    "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": "üíÄ",
}

RARITY_POINTS = {
    "–æ–±—ã—á–Ω–∞—è": 5,
    "—Ä–µ–¥–∫–∞—è": 10,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 25,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 50,
    "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 100,
}

RARITY_COINS = {
    "–æ–±—ã—á–Ω–∞—è": 2,
    "—Ä–µ–¥–∫–∞—è": 5,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 15,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 30,
    "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 50,
}

RARITY_PROBABILITIES = {
    "–æ–±—ã—á–Ω–∞—è": 55,
    "—Ä–µ–¥–∫–∞—è": 25,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 17,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 2.95,
    "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 4,
}

CHEST_COSTS = {
    "–æ–±—ã—á–Ω—ã–π": 20,
    "—Ä–µ–¥–∫–∏–π": 50,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 100,
}

CHEST_RARITY_PROBS = {
    "–æ–±—ã—á–Ω—ã–π": {
        "–æ–±—ã—á–Ω–∞—è": 75,
        "—Ä–µ–¥–∫–∞—è": 20,
        "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 7,
        "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 10,
        "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 8,
    },
    "—Ä–µ–¥–∫–∏–π": {
        "–æ–±—ã—á–Ω–∞—è": 5,
        "—Ä–µ–¥–∫–∞—è": 10,
        "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 15,
        "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 35,
        "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 15,
    },
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": {
        "–æ–±—ã—á–Ω–∞—è": 1,
        "—Ä–µ–¥–∫–∞—è": 2,
        "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 15,
        "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 65,
        "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": 25,
    },
}

DB_PARAMS = {
    'dbname': 'postgres',
    'user': 'postgres.ohjvqejdhqdvmpinreng',
    'password': 'Mateoloko17+',
    'host': 'aws-0-eu-north-1.pooler.supabase.com',
    'port': 6543
}

conn_pool = None

def init_connection_pool():
    global conn_pool
    if conn_pool is None:
        conn_pool = pool.SimpleConnectionPool(1, 10, **DB_PARAMS)

def get_connection():
    global conn_pool
    if conn_pool is None:
        init_connection_pool()
    return conn_pool.getconn()

def release_connection(conn):
    if conn_pool and conn:
        conn_pool.putconn(conn)

def init_db():
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                username TEXT,
                score INTEGER NOT NULL DEFAULT 0,
                coins INTEGER NOT NULL DEFAULT 0,
                last_time DOUBLE PRECISION NOT NULL DEFAULT 0,
                last_cube_time DOUBLE PRECISION NOT NULL DEFAULT 0
            );
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS cards (
                user_id TEXT,
                name TEXT,
                rarity TEXT,
                count INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, name),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            );
        """)
        conn.commit()
    finally:
        cur.close()
        release_connection(conn)

def load_user_data(user_id: str) -> dict:
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT score, coins, last_time, last_cube_time, username FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if row:
            score, coins, last_time, last_cube_time, username = row
        else:
            score, coins, last_time, last_cube_time, username = 0, 0, 0, 0, ""
            cur.execute(
                "INSERT INTO users(user_id, username, score, coins, last_time, last_cube_time) VALUES (%s, %s, %s, %s, %s, %s)",
                (user_id, username, score, coins, last_time, last_cube_time)
            )
            conn.commit()

        cur.execute("SELECT name, rarity, count FROM cards WHERE user_id = %s", (user_id,))
        cards = [{"name": r[0], "rarity": r[1], "count": r[2]} for r in cur.fetchall()]
    finally:
        cur.close()
        release_connection(conn)

    return {"score": score, "coins": coins, "last_time": last_time, "last_cube_time": last_cube_time, "cards": cards, "username": username}

def save_user_data(user_id: str, data: dict, card_to_update: dict = None, username: str = None):
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            UPDATE users SET score=%s, coins=%s, last_time=%s, last_cube_time=%s, username=%s WHERE user_id=%s
        """, (
            data.get("score", 0),
            data.get("coins", 0),
            data.get("last_time", 0),
            data.get("last_cube_time", 0),
            username,
            user_id
        ))

        if card_to_update:
            cur.execute("""
                INSERT INTO cards (user_id, name, rarity, count)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (user_id, name) DO UPDATE SET count = cards.count + EXCLUDED.count
            """, (user_id, card_to_update["name"], card_to_update["rarity"].lower(), card_to_update["count"]))
        conn.commit()
    finally:
        cur.close()
        release_connection(conn)

def parse_card_filename(filename: str) -> tuple[str, str]:
    base = os.path.splitext(filename)[0]
    if "_" not in base:
        return ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –§–∞–Ω—è", "–æ–±—ã—á–Ω–∞—è")
    name_part, rarity = base.rsplit("_", 1)
    name = name_part.replace("-", " ").capitalize()
    rarity = rarity.lower()
    return name, rarity

def handle_message(update: Update, context: CallbackContext):
    message = update.message
    if not message or not message.text:
        return

    text = message.text.strip().lower()
    user = message.from_user
    user_id = str(user.id)
    username = user.username or ""

    if text.startswith("—Å—É–Ω–¥—É–∫"):
        parts = text.split()
        if len(parts) != 2 or parts[1] not in CHEST_COSTS:
            message.reply_text(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—É–Ω–¥—É–∫ [–æ–±—ã—á–Ω—ã–π(20 –º–æ–Ω–µ—Ç) | —Ä–µ–¥–∫–∏–π(50 –º–æ–Ω–µ—Ç) | –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π(100 –º–æ–Ω–µ—Ç) ]")
            return

        chest_type = parts[1]
        open_chest(update, context, user_id, username, chest_type)
        return

    if text.startswith("–∫—É–±—ã —Ñ–∞–Ω—è"):
        try:
            amount = int(text.split()[-1])
        except:
            message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: '–∫—É–±—ã —Ñ–∞–Ω—è —Å—É–º–º–∞'")
            return

        user_data = load_user_data(user_id)
        now = datetime.now().timestamp()

        if now - user_data.get("last_cube_time", 0) < CUBE_WAIT_SECONDS:
            remaining = CUBE_WAIT_SECONDS - (now - user_data.get("last_cube_time", 0))
            mins, secs = divmod(int(remaining), 60)
            message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {mins} –º–∏–Ω {secs} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ—Å–∫–æ–º.")
            return

        if amount <= 0 or amount > user_data["score"]:
            message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
            return

        dice_msg = message.reply_dice()
        dice_value = dice_msg.dice.value if dice_msg.dice else random.randint(1, 6)

        context.job_queue.run_once(
            callback=handle_dice_result,
            when=3,
            context={"user_id": user_id, "chat_id": message.chat_id, "amount": amount, "username": username, "dice_value": dice_value}
        )
        return

    if text not in ["—Ñ–∞–Ω—è", "—Ñ–∞–Ω—è–∫"]:
        return

    user_data = load_user_data(user_id)
    last_time = user_data.get("last_time", 0)
    now_ts = datetime.now().timestamp()

    if now_ts - last_time < WAIT_HOURS * 3600:
        remaining = WAIT_HOURS * 3600 - (now_ts - last_time)
        hours, remainder = divmod(int(remaining), 3600)
        minutes, seconds = divmod(remainder, 60)
        msg = (
            "üòî –í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ —Ä—è–¥–æ–º –§–∞–Ω—é.\n\n"
            f"üïê –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {hours} —á–∞—Å {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
        )
        message.reply_text(msg)
        return

    all_cards = [f for f in os.listdir(CARD_FOLDER) if f.lower().endswith((".jpg", ".png"))]
    if not all_cards:
        message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    cards_by_rarity = {r: [] for r in RARITY_PROBABILITIES}
    for filename in all_cards:
        _, rarity = parse_card_filename(filename)
        if rarity in cards_by_rarity:
            cards_by_rarity[rarity].append(filename)

    rarities = list(RARITY_PROBABILITIES.keys())
    weights = list(RARITY_PROBABILITIES.values())
    chosen_rarity = random.choices(rarities, weights=weights, k=1)[0]

    chosen_file = random.choice(cards_by_rarity.get(chosen_rarity, all_cards))
    name, rarity = parse_card_filename(chosen_file)
    emoji = RARITY_EMOJIS.get(rarity, "üé¥")

    already_has = any(card["name"] == name for card in user_data["cards"])

    points = RARITY_POINTS.get(rarity, 5)
    coins_earned = 0
    
    if not already_has:
        coins_earned = RARITY_COINS.get(rarity, 0)
        card_status = "üÜï <b>–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!</b>"
    else:
        card_status = "‚ôªÔ∏è <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</b> (–º–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã)"
    
    user_data["score"] += points
    user_data["coins"] += coins_earned

    user_data["last_time"] = now_ts

    save_user_data(user_id, user_data, card_to_update={"name": name, "rarity": rarity, "count": 1}, username=username)

    coins_text = f"üí∞ +{coins_earned} –º–æ–Ω–µ—Ç" if coins_earned > 0 else ""
    message.reply_photo(
        photo=open(os.path.join(CARD_FOLDER, chosen_file), "rb"),
        caption=(
            f"{emoji} –í—ã –Ω–∞—à–ª–∏: {name}\n"
            f"‚≠êÔ∏è –û—á–∫–∏: +{points}\n"
            f"{coins_text}\n"
            f"{card_status}\n\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['score']} –æ—á–∫–æ–≤, {user_data['coins']} –º–æ–Ω–µ—Ç"
        ),
        parse_mode=ParseMode.HTML
    )


def open_chest(update: Update, context: CallbackContext, user_id: str, username: str, chest_type: str):
    user_data = load_user_data(user_id)

    cost = CHEST_COSTS[chest_type]
    if user_data["coins"] < cost:
        update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è {chest_type} —Å—É–Ω–¥—É–∫–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è {cost} –º–æ–Ω–µ—Ç.")
        return

    user_data["coins"] -= cost

    probs = CHEST_RARITY_PROBS[chest_type]
    rarities = list(probs.keys())
    weights = list(probs.values())
    chosen_rarity = random.choices(rarities, weights=weights, k=1)[0]

    all_cards = [f for f in os.listdir(CARD_FOLDER) if f.lower().endswith((".jpg", ".png"))]
    cards_by_rarity = {r: [] for r in RARITY_PROBABILITIES}
    for filename in all_cards:
        _, rarity = parse_card_filename(filename)
        if rarity in cards_by_rarity:
            cards_by_rarity[rarity].append(filename)

    if not cards_by_rarity.get(chosen_rarity):
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞.")
        return

    chosen_file = random.choice(cards_by_rarity[chosen_rarity])
    name, rarity = parse_card_filename(chosen_file)
    emoji = RARITY_EMOJIS.get(rarity, "üé¥")

    already_has = any(card["name"] == name for card in user_data["cards"])

    points = 0
    coins_earned = 0
    if not already_has:
        points = RARITY_POINTS.get(rarity, 5)
        coins_earned = RARITY_COINS.get(rarity, 0)
        card_status = "üÜï <b>–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!</b>"
    else:
        points = RARITY_POINTS.get(rarity, 5)
        coins_earned = 0
        card_status = "‚ôªÔ∏è <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</b> (–Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏)"

    user_data["score"] += points
    user_data["coins"] += coins_earned


    save_user_data(user_id, user_data, card_to_update={"name": name, "rarity": rarity, "count": 1}, username=username)

    coins_text = f"üí∞ +{coins_earned} –º–æ–Ω–µ—Ç" if coins_earned > 0 else ""
    update.message.reply_photo(
        photo=open(os.path.join(CARD_FOLDER, chosen_file), "rb"),
        caption=(
            f"{emoji} –í—ã –æ—Ç–∫—Ä—ã–ª–∏ {chest_type} —Å—É–Ω–¥—É–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏:\n"
            f"{name}\n"
            f"‚≠êÔ∏è –û—á–∫–∏: +{points}\n"
            f"{coins_text}\n"
            f"{card_status}\n\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['score']} –æ—á–∫–æ–≤, {user_data['coins']} –º–æ–Ω–µ—Ç"
        ),
        parse_mode=ParseMode.HTML
    )

def open_chest(update: Update, context: CallbackContext, user_id: str, username: str, chest_type: str):
    user_data = load_user_data(user_id)

    cost = CHEST_COSTS[chest_type]
    if user_data["coins"] < cost:
        update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è {chest_type} —Å—É–Ω–¥—É–∫–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è {cost} –º–æ–Ω–µ—Ç.")
        return

    user_data["coins"] -= cost

    probs = CHEST_RARITY_PROBS[chest_type]
    rarities = list(probs.keys())
    weights = list(probs.values())
    chosen_rarity = random.choices(rarities, weights=weights, k=1)[0]

    all_cards = [f for f in os.listdir(CARD_FOLDER) if f.lower().endswith((".jpg", ".png"))]
    cards_by_rarity = {r: [] for r in RARITY_PROBABILITIES}
    for filename in all_cards:
        _, rarity = parse_card_filename(filename)
        if rarity in cards_by_rarity:
            cards_by_rarity[rarity].append(filename)

    if not cards_by_rarity.get(chosen_rarity):
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å—É–Ω–¥—É–∫–∞.")
        return

    chosen_file = random.choice(cards_by_rarity[chosen_rarity])
    name, rarity = parse_card_filename(chosen_file)
    emoji = RARITY_EMOJIS.get(rarity, "üé¥")

    points = RARITY_POINTS.get(rarity, 5)
    coins_earned = RARITY_COINS.get(rarity, 0)

    already_has = any(card["name"] == name for card in user_data["cards"])

    points = 0
    coins_earned = 0
    if not already_has:
        points = RARITY_POINTS.get(rarity, 5)
        coins_earned = RARITY_COINS.get(rarity, 0)
        user_data["score"] += points
        user_data["coins"] += coins_earned
        card_status = "üÜï <b>–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!</b>"
    else:
        card_status = "‚ôªÔ∏è <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</b> (–æ—á–∫–∏ –∏ –º–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã)"

    save_user_data(user_id, user_data, card_to_update={"name": name, "rarity": rarity, "count": 1}, username=username)

    update.message.reply_photo(
        photo=open(os.path.join(CARD_FOLDER, chosen_file), "rb"),
        caption=(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –æ—Ç–∫—Ä—ã–ª–∏ <b>{chest_type} —Å—É–Ω–¥—É–∫</b> –∏ –ø–æ–ª—É—á–∏–ª–∏:\n\n"
            f"üîπ <b>–ö–∞—Ä—Ç–∞:</b> {emoji} <b>{name}</b>\n"
            f"üéñ <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> <b>{rarity}</b>\n"
            f"‚≠êÔ∏è <b>–û—á–∫–∏:</b> +<b>{points}</b>\n"
            f"üí∞ <b>–ú–æ–Ω–µ—Ç—ã:</b> +<b>{coins_earned}</b>\n"
            f"{card_status}\n\n"
            f"üì¶ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> üíé <b>{user_data['score']}</b> –æ—á–∫–æ–≤ | ü™ô <b>{user_data['coins']}</b> –º–æ–Ω–µ—Ç\n"
            f"‚ú®‚ú®‚ú®"
        ),
        parse_mode=ParseMode.HTML
    )

def handle_dice_result(context: CallbackContext):
    job = context.job
    data = job.context
    user_id = data["user_id"]
    chat_id = data["chat_id"]
    amount = data["amount"]
    username = data["username"]
    dice_value = data["dice_value"]

    user_data = load_user_data(user_id)
    win = False
    if dice_value > 3:
        user_data["score"] += amount
        win = True
    else:
        user_data["score"] -= amount
        if user_data["score"] < 0:
            user_data["score"] = 0

    user_data["last_cube_time"] = datetime.now().timestamp()
    save_user_data(user_id, user_data, username=username)

    result_text = (
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}\n"
        f"{'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏' if win else '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'} {amount} –æ—á–∫–æ–≤!\n"
        f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['score']} –æ—á–∫–æ–≤, {user_data['coins']} –º–æ–Ω–µ—Ç"
    )

    context.bot.send_message(chat_id=chat_id, text=result_text)

def mycards(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    user_data = load_user_data(user_id)

    if not user_data["cards"]:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    lines = []
    for card in user_data["cards"]:
        emoji = RARITY_EMOJIS.get(card["rarity"], "")
        lines.append(f"{emoji} {card['name']} ‚Äî {card['rarity'].capitalize()} (x{card['count']})")

    text = (
        "üé¥ <b>–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:</b>\n" +
        "\n".join(lines) +
        "\n\n" +
        f"üíé <b>–û—á–∫–∏:</b> {user_data['score']} | üëë <b>–ú–æ–Ω–µ—Ç—ã:</b> {user_data['coins']}"
    )

    update.message.reply_text(text, parse_mode=ParseMode.HTML)


def top(update: Update, context: CallbackContext):
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT username, score FROM users ORDER BY score DESC LIMIT 10")
        rows = cur.fetchall()
    finally:
        cur.close()
        release_connection(conn)

    if not rows:
        update.message.reply_text("–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    lines = []
    for i, (username, score) in enumerate(rows, 1):
        name_display = username if username else "–ê–Ω–æ–Ω–∏–º"
        lines.append(f"{i}. {name_display} ‚Äî {score} –æ—á–∫–æ–≤")

    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º:\n" + "\n".join(lines)
    update.message.reply_text(text)

def main():
    init_connection_pool()
    init_db()

    updater = Updater("7726532835:AAFF55l7B4Pbcc3JmDSF6Ksqzhdh9G466uc", use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CommandHandler("mycards", mycards))
    dp.add_handler(CommandHandler("top", top))
    
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
